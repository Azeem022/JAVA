==========================Remove Duplicates from Sorted Array
class Solution {
    public int removeDuplicates(int[] nums) {
        int j=0;
        for(int i=0;i<nums.length;i++){
            if(nums[j]!=nums[i]){
                j++;
                nums[j]=nums[i];
            }
        }
        return j=j+1;
    }
}

=======================Best Time to Buy and Sell Stock II
class Solution {
    public int maxProfit(int[] prices) {
        int profit = 0;
        for(int i=0;i<prices.length-1;i++){
            if(prices[i]<prices[i+1]){
                profit = profit+(prices[i+1]-prices[i]);
            }
        }
        return profit;
    }


===========================CONTAIN DUBLICATE
package Basics2;

import java.util.HashSet;

public class ContailDuplicate {
    public static void main(String[] args) {
        // Example usage
        int[] nums = {1, 2, 3, 4, 5};
        boolean result = containsDuplicate(nums);
        System.out.println("Contains Duplicate: " + result);
    }

    public static boolean containsDuplicate(int[] nums) {
        // Create a HashSet to store unique elements
        HashSet<Integer> set = new HashSet<>();

        // Iterate through the array
        for (int i=0;i<nums.length;i++) {
            // If the element is already in the set, it's a duplicate
            if (!set.add(nums[i])) {
                return true;  // Duplicate found
            }
        }

        // If no duplicates are found, return false
        return false;
    }
}

}

=============================Rotate Array
class Solution {
    public void rotate(int[] nums, int k) {
        k=k%nums.length;
        reverse(nums, 0, nums.length-1);
        reverse(nums, 0, k-1);
        reverse(nums, k, nums.length-1);
    }
    public void reverse(int [] nums, int start, int end){
    while(start<end){
        int temp = nums[start];
        nums[start]= nums[end];
        nums[end] = temp;
        start++;
        end--;
    }
}
}

=================================SINGLE NUMBER 
package Basics2;

class Solution {
    public static int singleNumber(int[] nums) {
        int result = 0;

        // XOR all the elements of the array
        for (int num : nums) {
            result ^= num;  // XOR the current number with result
        }

        // After XORing all numbers, result will contain the single number
        return result;
    }

    public static void main(String[] args) {
        // Example usage
        int[] nums = {2, 2, 1,1,4,5,5,4,6};
        int result = singleNumber(nums);
        System.out.println("The single number is: " + result);
    }
}


=============================================Intersection of Two Arrays II
public class Solution {  // Only one class definition here

    // Static method to find the intersection
    public static int[] intersect(int[] nums1, int[] nums2) {
        Map<Integer, Integer> map = new HashMap<>();
        List<Integer> result = new ArrayList<>();

        // Build frequency map for nums1
        for (int num : nums1) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }

        // Check intersection with nums2
        for (int num : nums2) {
            if (map.containsKey(num) && map.get(num) > 0) {
                result.add(num);
                map.put(num, map.get(num) - 1);  // Decrease the count
            }
        }

        // Convert the result list to an array
        int[] resultArray = new int[result.size()];
        for (int i = 0; i < result.size(); i++) {
            resultArray[i] = result.get(i);
        }
        return resultArray;
    }

    // Main method to test the solution
    public static void main(String[] args) {
        int[] nums1 = {1, 2, 2, 1};
        int[] nums2 = {2, 2};

        // Call the static intersect method
        int[] result = intersect(nums1, nums2);

        // Print the result
        System.out.println("Intersection of nums1 and nums2:");
        System.out.println(Arrays.toString(result));
    }
}


//================================TWO SUM =====================================
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int arr[] = new int[2];
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < nums.length; i++) {
            Integer value = map.get(target - nums[i]);
            
            if (value == null) {
                map.put(nums[i], i); // <- missing semicolon fixed here
            } else {
                arr[0] = value;
                arr[1] = i;
                break; // stop after finding the first match
            }
        }
        return arr;
    }
}


//====================================== REVERSE STRING ===========================================================
public class Solution {
    public void reverseString(char[] s) {
        int left = 0;
        int right = s.length - 1;

        while (left < right) {
            // Swap characters at left and right
            char temp = s[left];
            s[left] = s[right];
            s[right] = temp;

            // Move pointers
            left++;
            right--;
        }
    }
}



//=========================================REVERSE INTEGER =============================================================

public class Solution {
    public int reverse(int x) {
        int reversed = 0;

        while (x != 0) {
            int digit = x % 10; // get last digit
            x = x / 10;         // remove last digit

            // Check for overflow/underflow
            if (reversed > Integer.MAX_VALUE / 10 ||
               (reversed == Integer.MAX_VALUE / 10 && digit > 7)) {
                return 0; // overflow
            }
            if (reversed < Integer.MIN_VALUE / 10 ||
               (reversed == Integer.MIN_VALUE / 10 && digit < -8)) {
                return 0; // underflow
            }

            reversed = reversed * 10 + digit;
        }

        return reversed;
    }

}


//================================first non-repeating character in it and return its index=====================================
public class Solution {
    public static int firstUniqChar(String s) {
        int[] count = new int[26]; // Array to count each character (a-z)

        // Count how many times each character appears
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            count[c - 'a']++;
        }

        // Find the first character that appears only once
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (count[c - 'a'] == 1) {
                return i; // Return index of the first unique character
            }
        }

        return -1; // No unique character found
    }
}




//=======================================================A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric 
characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.====================================================================

Given a string s, return true if it is a palindrome, or false otherwise.
class Solution {
    public boolean isPalindrome(String s) {
        int left = 0, right = s.length() - 1;

        while (left < right) {
            while (left < right && !Character.isLetterOrDigit(s.charAt(left))) {
                left++;
            }

            while (left < right && !Character.isLetterOrDigit(s.charAt(right))) {
                right--;
            }

            if (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) {
                return false;
            }

            left++;
            right--;
        }

        return true;
    }
}
