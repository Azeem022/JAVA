==========================Remove Duplicates from Sorted Array
class Solution {
    public int removeDuplicates(int[] nums) {
        int j=0;
        for(int i=0;i<nums.length;i++){
            if(nums[j]!=nums[i]){
                j++;
                nums[j]=nums[i];
            }
        }
        return j=j+1;
    }
}

=======================Best Time to Buy and Sell Stock II
class Solution {
    public int maxProfit(int[] prices) {
        int profit = 0;
        for(int i=0;i<prices.length-1;i++){
            if(prices[i]<prices[i+1]){
                profit = profit+(prices[i+1]-prices[i]);
            }
        }
        return profit;
    }


===========================CONTAIN DUBLICATE
package Basics2;

import java.util.HashSet;

public class ContailDuplicate {
    public static void main(String[] args) {
        // Example usage
        int[] nums = {1, 2, 3, 4, 5};
        boolean result = containsDuplicate(nums);
        System.out.println("Contains Duplicate: " + result);
    }

    public static boolean containsDuplicate(int[] nums) {
        // Create a HashSet to store unique elements
        HashSet<Integer> set = new HashSet<>();

        // Iterate through the array
        for (int i=0;i<nums.length;i++) {
            // If the element is already in the set, it's a duplicate
            if (!set.add(nums[i])) {
                return true;  // Duplicate found
            }
        }

        // If no duplicates are found, return false
        return false;
    }
}

}

=============================Rotate Array
class Solution {
    public void rotate(int[] nums, int k) {
        k=k%nums.length;
        reverse(nums, 0, nums.length-1);
        reverse(nums, 0, k-1);
        reverse(nums, k, nums.length-1);
    }
    public void reverse(int [] nums, int start, int end){
    while(start<end){
        int temp = nums[start];
        nums[start]= nums[end];
        nums[end] = temp;
        start++;
        end--;
    }
}
}

=================================SINGLE NUMBER 
package Basics2;

class Solution {
    public static int singleNumber(int[] nums) {
        int result = 0;

        // XOR all the elements of the array
        for (int num : nums) {
            result ^= num;  // XOR the current number with result
        }

        // After XORing all numbers, result will contain the single number
        return result;
    }

    public static void main(String[] args) {
        // Example usage
        int[] nums = {2, 2, 1,1,4,5,5,4,6};
        int result = singleNumber(nums);
        System.out.println("The single number is: " + result);
    }
}
